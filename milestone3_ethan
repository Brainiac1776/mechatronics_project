/*
Milestone 2: Basic Navigation 
Team 27
Team Members: Tyler Wisniewski, Ethan Sarpong, Chimdi Anude

HARDWARE CONNECTIONS:
PIN A3 & A2 -> Left H-Bridge Motor 3 4
PIN A1 & A0 -> Right H-Bridge Motor 5 6 
PIN 0 -> 
PIN 1 -> 
PIN 2 -> 
PIN 3 -> Left QTI Sensor R / pin change
PIN 4 -> Right QTI Sensor R / pin change
PIN 5 ->
PIn 6 ->
PIN 7 -> Color Sensor output/ pin change 
PIN 8-11 -> S0-S3 on the Color sensor 
PIN 12 -> 
Pin 13 -> 

WIRE COLOR CODE FOR BOARD: 
*Not specified*

Note: The Left H-Bridge Green and Blue Wires were Flipped on the Bread Board
*/


//Global Variables
  int forward = 0b00001010; // pin A3 & A1 are HIGH 3, 5
  int backward = 0b00000101; // pin A0 & A2 HIGH 4, 6 
  int right = 0b00001001; // PIN A3 & A0 HIGH (Right Wheel Backward - Left Wheel Forward) 3, 6
  int left = 0b00000110; // pin A1 & A2 HIGH (Right Wheel Forward - Left Wheel Backward) 4, 5

  // "period" : stores the value of the output wave period in microseconds
  volatile int period;

  // "timer" : stores the value of TIMER1 
  volatile int color_timer;

  int threshold = 20; // boundary of yellow and blue

  char homeColor; // of whatever we land on
  char awayColor; // 

//Global Variables for QTI
  int PIN_QTI_LEFT = 0b00001000; // pin 3
  int PIN_QTI_RIGHT = 0b0010000; // pin 4

  

  ISR(PCINT2_vect) {	
    //Serial.println("1");
    // resets the timer to zero on a rising edge of sensor's output signal,
    // check if output signal (pin D7) is high
    if(PIND & 0b10000000){
      TCNT1 = 0x00;
      //Serial.println("2");
    }
     else { // and stores the timer value in a variable ("timer") on a falling edge (or vice versa).
      color_timer = TCNT1;
      //Serial.println("3");
    }

  }
  void navigation(){
    // pin set up 
    //DDRC = 0b00001111; //set pins A0-A3 as outputs

    // Move Forward
    PORTC = forward; 
    _delay_ms(2000);

    //Turn Right
    PORTC = right;
    _delay_ms(600);

    //Move Forward
    PORTC = forward; 
    _delay_ms(2000);

    //Turn Left
    PORTC = left;
    _delay_ms(600);

    // Move Backward
    PORTC = backward;
    _delay_ms(3500); 

    //Turn Left
    PORTC = left;
    _delay_ms(600);

    //Move Forward
    PORTC = forward; 
    _delay_ms(2000);

    PORTC = 0;

  }

/**
 * Limit a number to a specified set of bounds.
 */
int limit(int x, int min, int max) {
    if (x < min) {
        return min;
    }

    if (x > max) {
        return max;
    }

    return x;
}

/**
 * Fit a number into a new range.
 */
float range(float x, float in_min, float in_max, float out_min, float out_max) {
    return (x - in_min) / (in_max - in_min) * (out_max - out_min) + out_min;
}


int getColor() {
    // Set interrupt pin
    PCMSK2 |= 0b10000000;

    _delay_ms(5);

    // Divide the step count by 16 to convert from clock ticks
    // to microseconds, then multiply by 2 to get to full period
    int us = color_timer / 8; // (1/16) * 2

    // Reset interrupt pin
    PCMSK2 &= ~0b10000000;

    return us;
}

char where_am_i_color (){
         // PORTB = 0b000001;

        // Read red color and map to 0-255 range
        int red = getColor();
        //int R = limit(range(red, 25.0, 435.0, 255.0, 0), 0, 255);
        Serial.print("color:");
        Serial.println(red);
        _delay_ms(10);

        if (red<320 && red>150){
          //on blue
          return ('B');
        }
        else if (red<100 && red>1){
          //on yellow
          return ('Y');
        }
  }

void turn_around(int delay){
    PORTC = right;
    _delay_ms(delay);
      
    Serial.println("turn!");
    _delay_ms(10);

    PORTC = forward; 
    _delay_ms(300);
  }

void initColor() {
    // Enable interrupts globally
    sei();

    // Initialize interrupts
    PCICR |= 0b100;

    // Initialize the timer
    TCCR1A = 0b00; // normal mode
    TCCR1B = 0b01; // prescaler = 1
    TCNT1 = 0; // reset timer
}

void avoidBorder(){
    bool edge_left = PIND & PIN_QTI_LEFT; //return T or F 
    bool edge_right = PIND & PIN_QTI_RIGHT;
    _delay_ms(100);

    if(edge_left && !edge_right){
      PORTC = left; 
      Serial.println("1");
      _delay_ms(500);
    }
    if(!edge_left && edge_right){
      PORTC = right;
      Serial.println("2");
      _delay_ms(500);
    }
    if(edge_left && edge_right){
      PORTC = backward; 
      Serial.println("3");
      _delay_ms(800);
      PORTC = left; 
      _delay_ms(400);
    }
}

int main(void){
  init();
  Serial.begin(9600);
  
  //set all GPIO pins (as labeled above)
  DDRC = 0b00001111; //set pins A0-A3 as outputs
  DDRD = 0; // pins 3,4 QTI sensor, pin 7 Color Sensor Ouput
  DDRB = 0b00001111; // pins 8-11 are outputs (sensors)
  PORTB = 0b00010001; //20% output frequnecy with blue filter 

  initColor();

  homeColor = where_am_i_color(); // current reading from getColor()
  if (homeColor == 'B'){
    homeColor = 'B';
    awayColor = 'Y';
  }
  else{
    homeColor = 'Y';
    awayColor = 'B';
  }

  while(1){
    PORTC = forward; 
    where_am_i_color();
    _delay_ms(10);
    avoidBorder();

    if (where_am_i_color() == awayColor){
      Serial.println("in away");
      while(where_am_i_color() != homeColor ){
      PORTC = forward;
      avoidBorder();
      }
      _delay_ms(1000);
      PORTC = 0; 
      break;
    }
  
    }

    
}
